Aqui está o **CONTEXTO.md** prontinho pra colocar na raiz do projeto. Ele resume o que o app é, como está estruturado, decisões de arquitetura, padrões de código, chaves de storage, schemas de JSON, fluxo do SW/manifest, QA e roadmap. É direto, útil e específico pro seu PWA em **GitHub Pages**.

---

# CONTEXTO.md

## 1) Visão geral

* **Nome:** direito.love
* **Tipo:** PWA educacional (100% estático)
* **Hospedagem:** GitHub Pages (repositório de projeto)
* **Público-alvo:** estudantes de Direito (OAB/concursos)
* **Proposta:** gerar prompts/roteiros de estudo com módulos selecionáveis, sugestões de conteúdos e utilitários offline.

## 2) Decisões de arquitetura (importante)

* **Somente estático**: HTML/CSS/JS + JSON em `/kb/**`. Sem backend próprio.
* **Caminhos relativos** (obrigatório para Pages em `/REPO/`):

  * HTML: `<script type="module" src="./app.js">`
  * JS: `import {...} from './js/utils.js'`
  * CSS/ícones/JSON: `./css/...`, `./icons/...`, `./kb/...`
* **Service Worker**:

  * Versão semver estável (ex.: `v2.3.0`); evitar `Date.now()` em produção.
  * **HTML**: network-first com fallback `offline.html`.
  * **JSON em `/kb/**`**: network-first (sempre buscar atualização).
  * **Assets (CSS/JS/ícones)**: cache-first com atualização (stale-while-revalidate).
* **Manifest PWA**:

  * `display: "standalone"`, `scope: "./"`, `start_url: "./"`
  * Ícones **maskable** 192/512 e `apple-touch-icon 180`.
  * **Shortcuts** (atalhos): Novo tema, Recentes, Notícias, Ofertas.
  * **Web Share Target**: aceitar texto compartilhado e preencher o tema.
* **Privacidade**: sem cookies próprios; opcional Cloudflare Web Analytics (sem cookies).

## 3) Estrutura de pastas

```
/
├─ index.html
├─ recentes.html
├─ noticias.html
├─ ofertas.html
├─ offline.html
├─ como-funciona.html
├─ objetivo.html
├─ sobre.html
├─ privacidade.html
├─ termos.html
├─ app.js
├─ service-worker.js
├─ manifest.json
├─ css/
│  └─ styles.css
├─ js/
│  ├─ utils.js
│  ├─ data-acessorios.js
│  ├─ busca-legislacao.js
│  ├─ recents.js
│  ├─ news.js          (busca notícias do /kb/news/news.json)
│  └─ ofertas.js       (lista ofertas do /kb/books/ofertas.json)
├─ kb/
│  ├─ news/
│  │  └─ news.json
│  └─ books/
│     └─ ofertas.json
└─ icons/
   ├─ pwa-192.png
   ├─ pwa-512.png
   ├─ pwa-180.png      (apple touch)
   └─ og-cover.png     (Open Graph)
```

## 4) Páginas e funções

* **index.html**: chat principal, seleção de módulos (chips), sugestões, resumo/copiar/compartilhar.
* **recentes.html**: histórico (máx. 50) com copiar/excluir/compartilhar.
* **noticias.html**: agregador (lê `/kb/news/news.json`).
* **ofertas.html**: catálogo de livros (lê `/kb/books/ofertas.json`).
* **offline.html**: fallback de navegação sem rede.
* **institucionais**: como-funciona, objetivo, sobre, privacidade, termos.

## 5) Módulos JS (resumo de responsabilidades)

* **utils.js**: `$`, `$$`, `toast`, `copyToClipboard`, `trapFocus`, `readJSON/writeJSON`.
* **data-acessorios.js**: lista estática de acessórios (chips).
* **busca-legislacao.js**: busca sugestões em JSONs locais de “base de conhecimento” (flatten genérico, tolerante a esquemas diversos).
* **recents.js**: listar/salvar/remover “Recentes” em `localStorage`.
* **news.js**: filtra e ranqueia notícias por tema (client-side).
* **ofertas.js**: carrega e filtra ofertas de livros (client-side).
* **app.js**: fluxo do chat, chips selecionáveis, modais (educativo, resumo), drawer, SW register, Web Share, integração com sugestões e (opcional) notícias contextuais.

## 6) LocalStorage / chaves e flags

* `recent_prompts_v1` — array com prompts: `{ texto, quando, tema?, mods? }`
* `educativo_ok` — boolean string `'true'` (fecha modal educativo)
* `fav_mods_v1` — array de IDs favoritos (se ⭐ for habilitado)
* (opcional) `prefs_v1` — objeto com preferências (ex.: `{hideBooks:true, reduceMotion:true, highContrast:false}`)

## 7) Schemas de dados (JSON)

**/kb/news/news.json**

```json
{
  "updatedAt": "2025-09-04T12:00:00Z",
  "items": [
    {
      "source": "STJ",
      "title": "Turma decide sobre ...",
      "description": "Resumo curto (160–240 chars).",
      "url": "https://...",
      "published": "2025-09-04T11:35:00Z",
      "tags": ["civil","trabalho"]
    }
  ]
}
```

**/kb/books/ofertas.json**

```json
{
  "updatedAt": "2025-09-04",
  "items": [
    {
      "title": "Responsabilidade Civil",
      "author": "Sérgio Cavalieri",
      "desc": "Por que é bom para o tema X.",
      "price": "R$ 89,90",        // opcional; esconder se desatualizar
      "url": "https://amzn.to/SEU_ID",
      "tags": ["civil","oab"]
    }
  ]
}
```

> Observação Amazon: sempre abrir em nova aba com `rel="nofollow sponsored noopener"`. Exibir disclosure:
> “Como associado da Amazon, posso ganhar com compras qualificadas.”

## 8) Acessibilidade e UX (padrões)

* Alvos de toque ≥ **44px**; `:focus-visible` evidente; `prefers-reduced-motion` respeitado.
* `aria-label` descritivos (chips, botões, links), `role="dialog"` + `trapFocus` nos modais.
* Texto de ajuda curto e claro; toasts com feedback objetivo; evitar “cliques acidentais” perto de ações críticas.
* Conteúdo copiado **limpo** (sem links externos).

## 9) Performance & SEO

* System font stack (sem Google Fonts).
* CSS crítico (≤6KB) inline opcional; resto no `/css/styles.css`.
* Preload dos ícones principais (maskable).
* Open Graph/Twitter meta em todas as páginas.
* `robots.txt` + `sitemap.xml` (somente páginas HTML).
* Lighthouse alvo: **≥95** (Performance/A11y/Best Practices/SEO).
* Core Web Vitals alvo: LCP < 2.5s, INP < 200ms, CLS \~ 0.

## 10) Manifest (itens chave)

```json
{
  "name": "direito.love",
  "short_name": "direito.love",
  "start_url": "./",
  "scope": "./",
  "display": "standalone",
  "background_color": "#000000",
  "theme_color": "#000000",
  "icons": [
    {"src":"./icons/pwa-192.png","sizes":"192x192","type":"image/png","purpose":"any maskable"},
    {"src":"./icons/pwa-512.png","sizes":"512x512","type":"image/png","purpose":"any maskable"}
  ],
  "shortcuts": [
    {"name":"Novo tema","url":"./?new=1"},
    {"name":"Recentes","url":"./recentes.html"},
    {"name":"Notícias","url":"./noticias.html"},
    {"name":"Ofertas","url":"./ofertas.html"}
  ],
  "share_target": {
    "action": "./",
    "method": "GET",
    "params": {"title":"title","text":"text","url":"url"}
  }
}
```

## 11) Service Worker (estratégia)

* **Install**: pré-cache shell mínimo (HTML essenciais + CSS/JS críticos + ícones).
* **Activate**: limpar caches ≠ versão atual.
* **Fetch**:

  * `req.mode==='navigate' || accept.includes('text/html')` → **network-first** → fallback `offline.html`.
  * `url.pathname.startsWith('/kb/') || url.pathname.endsWith('.json')` → **network-first**, fallback cache (se existir).
  * Outros (CSS/JS/ícones) → cache-first + atualização em background.
* **Version bump**: alterar constante `VERSION = 'vX.Y.Z'` a cada release.

## 12) Integrações externas (opcionais)

* **Cloudflare Web Analytics** (sem cookies).
* **GitHub Actions** (RSS → `kb/news/news.json`): job agendado a cada 3h que lê RSS e **commita** JSON consolidado.
* **Substack/beehiiv** (newsletter) — linkado no Drawer.

## 13) Como testar localmente (importante)

* Service Worker **não funciona em `file://`**. Use um servidor local simples:

  * **Python**: `python3 -m http.server 8080`
  * **Node**: `npx http-server -p 8080`
  * **VS Code**: Live Server
* Abrir `http://localhost:8080/REPO/` e testar:

  * Fluxo do chat (chips, sugestões, resumo, copiar/compartilhar).
  * Recentes (salva, copia, exclui).
  * Notícias/Ofertas (carrega online; mantém snapshot offline).
  * Instalar PWA e abrir offline.

## 14) Roadmap (priorizado)

* **P0**: páginas Notícias/Ofertas; manifest (shortcuts); SW com semver; A11y/tap/focus; OG/Twitter/Schema.
* **P1**: cards contextuais (notícias/livro) no fluxo; ⭐ favoritos; install prompt; Web Share Target.
* **P2**: Cloudflare Analytics; sitemap/robots; 2–3 páginas “guia”; atalhos de teclado; preferências (alto contraste, reduzir animação, esconder dicas de livros).

## 15) Padrões de código

* **Sem builder**: JS módulos nativos (`type="module"`).
* **ES2020+**; nomes descritivos; comentários apenas quando necessário.
* **Atenção a iOS**: copiar/compartilhar exigem gesto de usuário (já tratado nos botões).
* **Erros silenciosos** no carregamento de JSON não travam a UI (mostrar feedback suave).

---

## 16) Resumo executivo

* PWA 100% estático, **rápido, acessível e offline-first**.
* Dados dinâmicos por **JSON versionado** no repositório.
* **Nada de links externos no texto copiado**; sugestões/notícias/livros aparecem como **cards no app**.
* Preparado para **afiliados**, **SEO leve** e **crescimento** sem sair do GitHub Pages.

---

Qualquer dev abrindo esse arquivo entende o projeto e não quebra caminhos, SW nem UX. Se quiser, posso gerar um **README.md** curto apontando pra este CONTEXTO.md.
